service: mmm

custom:
  namespace: ${self:service}-${self:custom.stage}
  stage: ${opt:stage, self:provider.stage}
  aws:
    id: __AWS_ACCOUNT_ID__
  lex:
    name: MyMusicMate
    alias: prod
    blueprint: src/lex/blueprint.json
#    deploy: after:deploy:deploy  #Uncomment this if you want to deploy the Lex bot with the `sls deploy`.
  static:
    root: '/src/web/'
    deploy: after:deploy:deploy
provider:
  name: aws
  runtime: python3.6
  timeout: 300

  stage: prod
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.TEAMS_TABLE}
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.INTENTS_TABLE}
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.CONCERTS_TABLE}
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.VOTES_TABLE}
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - arn:aws:sns:*:*:${self:custom.namespace}-dispatch-actions
        - arn:aws:sns:*:*:${self:custom.namespace}-post-message
        - arn:aws:sns:*:*:${self:custom.namespace}-update-message
        - arn:aws:sns:*:*:${self:custom.namespace}-search-concert
        - arn:aws:sns:*:*:${self:custom.namespace}-evaluate-votes
        - arn:aws:sns:*:*:${self:custom.namespace}-voting-timer
    - Effect: Allow
      Action:
        - lex:PostText
      Resource:
        - arn:aws:lex:*:*:bot:${self:custom.lex.name}:*

  environment:
    SLACK_APP_ID: __SLACK_APP_ID__
    SLACK_APP_SECRET: __SLACK_APP_SECRET__
    SLACK_APP_TOKEN: __SLACK_APP_TOKEN__
    LASTFM_KEY: __LASTFM_KEY__
    DEVELOPER_KEY: __DEVELOPER_KEY__

    BOT_NAME: ${self:service}
    YOUTUBE_API_SERVICE_NAME: youtube
    YOUTUBE_API_VERSION: v3
    NAMESPACE: ${self:custom.namespace}
    TEAMS_TABLE: ${self:custom.namespace}-teams
    INTENTS_TABLE: ${self:custom.namespace}-intents
    CONCERTS_TABLE: ${self:custom.namespace}-concerts
    VOTES_TABLE: ${self:custom.namespace}-votes

    LEX_NAME: ${self:custom.lex.name}
    LEX_ALIAS: ${self:custom.lex.alias}
    CONCERT_VOTE_OPTIONS_MAX: 3
    VOTING_TIMER_INTERNAL_TIMEOUT: 300
    DEFAULT_VOTING_TIMEOUT: 250    # Total voting time.
    VOTING_EXTENSION_TIMEOUT: 125  # The remaining time the bot send a reminder message to unvoted members.
    VOTING_BLINKING_INTERVAL: 2
    VOTE_RESULT_WAITING: 5
    POST_MESSAGE_SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-post-message" ] ]  }
    DISPATCH_ACTIONS_SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-dispatch-actions" ] ]  }
    VOTING_TIMER_SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-voting-timer" ] ]  }
    EVALUATE_VOTES_SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-evaluate-votes" ] ]  }
    UPDATE_MESSAGE_SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-update-message" ] ]  }

    BLINK_ON_COLOR: '#2FABEA'
    BLINK_OFF_COLOR: '#9febff'
    MESSAGE_DEFAULT_COLOR: '#E8E8E8'

    SHUFFLE_CONCERT_LIST: '1' # 1 for production, 0 for dev mode. If the value is 0, the bot won't shuffle the result, showing always the same result.

    S3_BUCKET_ARN: { "Fn::Join" : [":", ["arn:aws:s3:${self:provider.region}", { "Ref" : "AWS::AccountId" }, { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    S3_BUCKET_ADDRESS: { "Fn::Join" : ["/", ["https://s3.amazonaws.com", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }

    TICKET_PAGE_LINK: { "Fn::Join" : ["/", ["https://s3.amazonaws.com", { "Ref" : "ServerlessDeploymentBucket" }, "ticket.html" ] ]  }
    TICKET_IMAGE_LINK: { "Fn::Join" : ["/", ["https://s3.amazonaws.com", { "Ref" : "ServerlessDeploymentBucket" }, "mmm_ticket.png" ] ]  }
    DEVS_BUCKET_ADDRESS: { "Fn::Join" : ["/", ["https://s3.amazonaws.com", { "Ref" : "ServerlessDeploymentBucket" }, 'devs' ] ]  }

package:
  exclude:
    - .idea/**
    - mmm/**  # Virtual environment directory.
    - node_modules/**
    - emoji/**
    - requirements.txt
    - package.json
    - serverless.yml
    - .gitignore
    - INSTALL.md
    - README.md

functions:
  slack-install-app:
    handler: src/slack/lambda/install-app.handler
    events:
      - http:
          path: install
          method: get
    environment:
      SUCCESS_URL: { "Fn::Join" : ["/", ["https://s3.amazonaws.com", { "Ref" : "ServerlessDeploymentBucket" }, "install.html?status=success" ] ]  }
      FAIL_URL: { "Fn::Join" : ["/", ["https://s3.amazonaws.com", { "Ref" : "ServerlessDeploymentBucket" }, "install.html?status=fail" ] ]  }
  slack-listen-events:
    handler: src/slack/lambda/listen-events.handler
    environment:
      SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-dispatch-actions" ] ]  }
    events:
      - http:
          path: events
          method: post
  slack-dispatch-actions:
    handler: src/slack/lambda/dispatch-actions.handler
    events:
      - sns: ${self:custom.namespace}-dispatch-actions
    environment:
      SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-post-message" ] ]  }
  slack-post-message:
    handler: src/slack/lambda/post-message.handler
    events:
      - sns: ${self:custom.namespace}-post-message
  slack-update-message:
    handler: src/slack/lambda/update-message.handler
    events:
      - sns: ${self:custom.namespace}-update-message
  slack-listen-interactives:
    handler: src/slack/lambda/listen-interactives.handler
    events:
      - http:
          path: interactives
          method: post
  lex-about-me:
    handler: src/lex/lambda/about-me.handler
  lex-about-family:
    handler: src/lex/lambda/about-family.handler
  lex-invite-mate:
    handler: src/lex/lambda/invite-mate.handler
  lex-reserve-lounge:
    handler: src/lex/lambda/reserve-lounge.handler
    environment:
      SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-post-message" ] ]  }
  lex-ask-city:
    handler: src/lex/lambda/ask-city.handler
    environment:
      SEARCH_CONCERT_SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-search-concert" ] ]  }
      BIT_CITY_SEARCH: "http://api.bandsintown.com/artists/{}/events/recommended?location={}&radius={}&app_id=chatbot&api_version=2.0&format=json"
  lex-ask-taste:
    handler: src/lex/lambda/ask-taste.handler
    environment:
      BIT_ARTIST_URL: "https://api.bandsintown.com/artists/{}.json?api_version=2.0&app_id=MyMusicMate"
  lex-ask-extend:
    handler: src/lex/lambda/ask-extend.handler
  app-search-concert:
    handler: src/app/lambda/search-concert.handler
    events:
      - sns: ${self:custom.namespace}-search-concert
    environment:
      LASTFM_TOP_URL: "http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag={}&limit=100&api_key={}&format=json"
#      LASTFM_TAG_URL: "http://ws.audioscrobbler.com/2.0/?method=tag.getinfo&tag={}&api_key={}&format=json"
      BIT_CONCERT_SEARCH_BY_ARTISTS_API: "http://api.bandsintown.com/artists/{}/events/recommended?location={}&radius={}&app_id=chatbot&api_version=2.0&format=json"
      GENRE_TO_ARTIST_MAX: 5
      CONCERT_SEARCH_RADIUS: 150
  app-evaluate-votes:
    handler: src/app/lambda/evaluate-votes.handler
    events:
      - sns: ${self:custom.namespace}-evaluate-votes
  app-voting-timer:
    handler: src/app/lambda/voting-timer.handler
    events:
      - sns: ${self:custom.namespace}-voting-timer

resources:
  Resources:
    TeamsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TEAMS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    IntentsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.INTENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: channel_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: channel_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ConcertsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONCERTS_TABLE}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
          - AttributeName: event_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: event_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    VotesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.VOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

plugins:
  - serverless-python-requirements
  - serverless-lex-deploy
  - serverless-static-s3

