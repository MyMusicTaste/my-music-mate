service: mmtbot
frameworkVersion: "=1.15.1"

custom:
  namespace: ${self:service}-${self:custom.stage}
  stage: ${opt:stage, self:provider.stage}
  lex:
    name: TodaysWeather
    alias: prod

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.TEAMS_TABLE}
#    - Effect: Allow  # This need to be uncommented if you want to make a lambda function to call another one.
#      Action:
#        - lambda:invokeFunction
#      Resource:
#        - arn:aws:lambda:*:*:function:${self:custom.namespace}-actions
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - arn:aws:sns:*:*:${self:custom.namespace}-dispatch
    - Effect: Allow
      Action:
        - lex:PostText
      Resource:
        - arn:aws:lex:*:*:bot:${self:custom.lex.name}:${self:custom.lex.alias}
    - Effect: Allow
      Action:
        - 	lex:PutBot
      Resource:
        - arn:aws:lex:*:*:bot:${self:custom.lex.name}:$LATEST


# you can define service wide environment variables here
  environment:
    BOT_NAME: ${self:service}
    CLIENT_ID: '189333670117.191926149280'
    CLIENT_SECRET: fa1ebaabfb691b08e662654762c539ee
    VERIFICATION_TOKEN: 6ib3YPi7VHjaMyeXQr04pySF
    NAMESPACE: ${self:custom.namespace}
    TEAMS_TABLE: ${self:custom.namespace}-teams


# you can add packaging information here
package:
  exclude:
    - .idea/**
    - mmt-bot/**
    - requirements.txt
    - package.json


functions:
  install:
    handler: src/install.handler
    events:
      - http:
          path: install
          method: get
  events:
    handler: src/events.handler
    environment:
      SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-dispatch" ] ]  }  # same as `arn:aws:sns:*:*:${self:custom.namespace}-dispatch` but environment values require String format.
    events:
      - http:
          path: events
          method: post
  dispatch:
    handler: src/dispatch.handler
    events:
      - sns: ${self:custom.namespace}-dispatch
  fullfill:
    handler: src/fullfill.handler


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    TeamsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TEAMS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements