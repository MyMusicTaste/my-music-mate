service: mmm
frameworkVersion: "~1.16.1"

custom:
  namespace: ${self:service}-${self:custom.stage}
  stage: ${opt:stage, self:provider.stage}
  aws:
    id: 120387605022
  lex:
    name: MyMusicMate
    alias: dev

provider:
  name: aws
  runtime: python3.6

  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.TEAMS_TABLE}
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.INTENTS_TABLE}
        - arn:aws:dynamodb:*:*:table/${self:provider.environment.TALKS_TABLE}
#    - Effect: Allow  # This need to be uncommented if you want to make a lambda function to call another one.
#      Action:
#        - lex:invokeFunction
#      Resource:
#        - arn:aws:lambda:*:*:function:${self:custom.namespace}-temp
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - arn:aws:sns:*:*:${self:custom.namespace}-dispatch-actions
#        - arn:aws:sns:*:*:${self:custom.namespace}-room
    - Effect: Allow
      Action:
        - lex:PostText
      Resource:
        - arn:aws:lex:*:*:bot:${self:custom.lex.name}:*


  environment:
    AWS_ID: ${self:custom.aws.id}
    BOT_NAME: ${self:service}
    SLACK_APP_ID: '189333670117.206796368962'
    SLACK_APP_SECRET: 65fd12e59aa8517ddda3d9aaeaff13d0
    SLACK_APP_TOKEN: z0eX6y1zLzOjjJmdlNBXcsL5
    NAMESPACE: ${self:custom.namespace}
    TEAMS_TABLE: ${self:custom.namespace}-teams
    INTENTS_TABLE: ${self:custom.namespace}-intents
    TALKS_TABLE: ${self:custom.namespace}-talks
    LEX_NAME: ${self:custom.lex.name}
    LEX_ALIAS: ${self:custom.lex.alias}


package:
  exclude:
    - .idea/**
    - mmm/**
    - node_modules/**
    - requirements.txt
    - package.json
    - serverless.yml
    - .gitignore
    - README.md


functions:
  slack-install-app:
    handler: src/slack/install-app.handler
    events:
      - http:
          path: install
          method: get
  slack-listen-events:
    handler: src/slack/listen-events.handler
    environment:
      SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-dispatch-actions" ] ]  }  # same as `arn:aws:sns:*:*:${self:custom.namespace}-dispatch-actions` but environment values require String format.
    events:
      - http:
          path: events
          method: post
  slack-dispatch-actions:
    handler: src/slack/dispatch-actions.handler
    events:
      - sns: ${self:custom.namespace}-dispatch-actions
#  slack-room:
#    handler: src/slack/room.handler
#    events:
#      - sns: ${self:custom.namespace}-room
  lex-invite-mate:
    handler: src/lex/invite-mate.handler
  lex-reserve-lounge:
    handler: src/lex/reserve-lounge.handler
#    environment:
#      SNS_ARN: { "Fn::Join" : [":", ["arn:aws:sns:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.namespace}-room" ] ]  }


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    TeamsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TEAMS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    IntentsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.INTENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: whisper_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: whisper_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    TalksDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TALKS_TABLE}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: caller_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: caller_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-lex-deploy
