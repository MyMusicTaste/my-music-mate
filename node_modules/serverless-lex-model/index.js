'use strict';

const AWS = require('aws-sdk');
const fs = require("fs");

AWS.config.update({region:'us-east-1'});
AWS.config.setPromisesDependency(require('bluebird'));
const lexModelHelper = require('./lex-model-helper');
const jsonHelper = require('./json-helper');
const awsHelper = require('./aws-helper');

class ServerlessLexModel {
  constructor(serverless, options) {
    this.serverless = serverless;
    this.options = options;

    this.commands = {
      lex: {
        lifecycleEvents: [
          'deploy'
        ]
      }
    };

    this.hooks = {
      'lex:deploy': this.afterDeploy.bind(this),
      // 'before:deploy:initialize': this.afterDeploy.bind(this)
      // 'after:deploy:deploy': this.afterDeploy.bind(this),
    };
    
    awsHelper.setConfig({
	    '${self:custom.namespace}' : this.serverless.service.service + '-' + this.serverless.service.provider.stage,
	    '${self:provider.region}': this.serverless.service.provider.region
    });
  }

  afterDeploy() {
    this.serverless.cli.log('Deploying a Lex bot...');
    // Read info about lex from serverless.yml file.
    const lexConfig = this.serverless.service.custom.lex;
    // Read lex bot blueprint from json file.
	  this.blueprint = JSON.parse(fs.readFileSync("src/lex.json"));
	  // Replace aws-related string value into actual values.
	  jsonHelper.traverse(this.blueprint, function(obj, key) {
	    awsHelper.sanitize(obj, key);
    });
	  
	  this.updatePermissions()
		  .then((data) => {
		    return this.updateIntents(this.blueprint.intents);
		  })
		  .then((data) => {
	  	  return this.updateBot(lexConfig);
		  })
		  .then((data) => {
	  	  this.serverless.cli.log(`${lexConfig.name} has been successfully created!`);
		  })
		  .catch((error) => {
	  	  this.serverless.cli.log(error);
		  })
  }
  
  updatePermissions() {
  	this.serverless.cli.log('Updating AWS Lambda permissions...');
  	const permissions = [ // TODO-JW Getting permission list from lex.json or serverless.yml file.
		  {
		  	functionName: 'mmtbot-dev-temp',
			  sourceArn: 'arn:aws:lex:us-east-1:120387605022:intent:InivteFriends:*'
		  }
	  ];
  	
  	const promises = [];
  	permissions.forEach((permission) => {
  		const functionName = permission.functionName;
  		const sourceArn = permission.sourceArn;
  		promises.push(
  			lexModelHelper.removePermission(functionName)
				  .finally(() => {
		        return lexModelHelper.addPermission(functionName, sourceArn);
				  })
		  );
	  });
  	return Promise.all(promises);
  }
  
  updateIntents(intents) {
  	this.serverless.cli.log('Updating AWS Lex intentions...');
  	const promises = [];
  	intents.forEach((intent) => {
  		promises.push(
  			lexModelHelper.getIntent(intent)
				  .then((data) => {
	          intent.checksum = data.checksum
				  })
				  .finally(() => {
	          return lexModelHelper.putIntent(intent)
			    })
		  );
	  });
  	return Promise.all(promises);
  }
  
  updateBot(lexConfig) {
    this.serverless.cli.log('Updating AWS Lex Bot...');
    return lexModelHelper.getBot(lexConfig)
	    .then((data) => {
    	  lexConfig.checksum = data.checksum;
	    })
	    .finally(() => {
    	  return lexModelHelper.putBot(lexConfig)
	    });
  }
}

module.exports = ServerlessLexModel;
