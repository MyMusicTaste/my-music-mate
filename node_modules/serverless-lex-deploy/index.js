'use strict';

const AWS = require('aws-sdk');
const fs = require("fs");

AWS.config.update({region:'us-east-1'});
AWS.config.setPromisesDependency(require('bluebird'));
const lexModelHelper = require('./lex-model-helper');
const jsonHelper = require('./json-helper');
const awsHelper = require('./aws-helper');
const delayPromise = require('./promise-delay');

class ServerlessLexModel {
  constructor(serverless, options) {
    this.serverless = serverless;
    this.options = options;

    this.commands = {
      lex: {
        lifecycleEvents: [
          'deploy'
        ]
      }
    };

    this.hooks = {
      'lex:deploy': this.deployLex.bind(this),
      // 'after:deploy:deploy': this.deployLex.bind(this),
    };

    awsHelper.setConfig({
	    '${self:custom.namespace}' : this.serverless.service.service + '-' + this.serverless.service.provider.stage,
	    '${self:provider.region}': this.serverless.service.provider.region
    });
  }

  deployLex() {
    this.serverless.cli.log('Deploying a Lex bot...');

    // Read Lex bot build info from lex.json file.
    const lexConfig = JSON.parse(fs.readFileSync(this.serverless.service.custom.lex.blueprint));
    // Read the Lex bot name from serverless.yml file.
	  lexConfig.bot.name = this.serverless.service.custom.lex.name;
	  lexConfig.alias.name = this.serverless.service.custom.lex.alias;
	  lexConfig.alias.botName = this.serverless.service.custom.lex.name;
	  // Fill out Lex bot intent list from intents data.
	  lexConfig.bot.intents = lexConfig.intents.map((intent) => {
	  	return {
	  		intentName: intent.name,
				intentVersion: "$LATEST"  // TODO-JW Version control...
		  }
	  });

	  // Replace aws-related string value into actual values.
	  jsonHelper.traverse(lexConfig, function(obj, key) {
	    awsHelper.sanitize(obj, key);
	  });
	  
	  setTimeout(function() {
	  	this.updateLambdaLexPermissions(lexConfig.intents)
		  .then(delayPromise(5000))
		  .then((data) => {
		    return this.updateIntents(lexConfig.intents);
		  })
		  .then(delayPromise(5000))
		  .then((data) => {
	  	  return this.updateBot(lexConfig.bot);
		  })
		  .then(delayPromise(5000))
		  .then((data) => {
	  	  return this.updateBotAlias(lexConfig.alias);
		  })
		  .then(delayPromise(5000))
		  .then((data) => {
	  	  this.serverless.cli.log(`${lexConfig.bot.name} has been successfully deployed. Please wait at least 30 seconds before testing your bot!`);
		  })
		  .then(delayPromise(5000))
		  .catch((error) => {
	  	  this.serverless.cli.log(error);
		  })
	  }.bind(this), 5000)
  }

  updateLambdaLexPermissions(intents) {
  	this.serverless.cli.log('Updating AWS Lambda Lex permissions...');
  	const permissions = [];

  	intents.forEach((intent) => {
  	  if (intent.name) {
  	  	const sourceArn = 'arn:aws:lex:' + this.serverless.service.provider.region + ':' + this.serverless.service.custom.aws.id + ':intent:' + intent.name + ':*';
  	  	if (intent.dialogCodeHook.uri) {
  	  		const temp = intent.dialogCodeHook.uri;
  	  	  const functionName = temp.substring(temp.lastIndexOf(':') + 1, temp.length);
  	  	  permissions.push({
			      sourceArn: sourceArn,
			      functionName: functionName
		      });
		    }
		    // if (intent.fulfillmentActivity.codeHook.uri) {
  	  	// 	const temp = intent.fulfillmentActivity.codeHook.uri;
  	  	//   const functionName = temp.substring(temp.lastIndexOf(':') + 1, temp.length);
  	  	//   permissions.push({
			   //    sourceArn: sourceArn,
			   //    functionName: functionName
		    //   });
		    // }
	    }
	  });

  	const promises = [];
  	permissions.forEach((permission) => {
  		const functionName = permission.functionName;
  		const sourceArn = permission.sourceArn;
  		promises.push(
  			lexModelHelper.removePermission(functionName)
				  .finally(() => {
		        return lexModelHelper.addPermission(functionName, sourceArn);
				  })
		  );
	  });
  	return Promise.all(promises);
  }

  updateIntents(intents) {
  	this.serverless.cli.log('Updating AWS Lex intentions...');
  	const promises = [];
  	intents.forEach((intent) => {
  		promises.push(
  			lexModelHelper.getIntent(intent)
				  .then((data) => {
	          intent.checksum = data.checksum
				  })
				  .finally(() => {
	          return lexModelHelper.putIntent(intent)
			    })
		  );
	  });
  	return Promise.all(promises);
  }

  updateBot(bot) {
    this.serverless.cli.log('Updating AWS Lex Bot...');
    return lexModelHelper.getBot(bot)
	    .then((data) => {
    	  bot.checksum = data.checksum;
	    })
	    .finally(() => {
    	  return lexModelHelper.putBot(bot)
	    });
  }

  updateBotAlias(alias) {
  	this.serverless.cli.log('Updating AWS Lex Bot alias...');
  	return lexModelHelper.getBotAlias(alias)
	    .then((data) => {
    	  alias['checksum'] = data.checksum;
	    })
	    .finally(() => {
    	  return lexModelHelper.putBotAlias(alias)
	    });
  }
}

module.exports = ServerlessLexModel;
