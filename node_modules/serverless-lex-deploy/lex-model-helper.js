const AWS = require('aws-sdk');
const lex = new AWS.LexModelBuildingService();
const lambda = new AWS.Lambda();


removePermission = function (functionName) {
  const params = {
    "FunctionName": functionName,
    "StatementId": functionName
  };
  console.log(functionName);
  return lambda.removePermission(params).promise();
};

addPermission = function (functionName, sourceArn) {
  const params = {
    "Action": "lambda:InvokeFunction",
    "FunctionName": functionName,
    "Principal": "lex.amazonaws.com",
    "SourceArn": sourceArn,
    "StatementId": functionName
  };
  console.log(functionName + ' ' + sourceArn);
  return lambda.addPermission(params).promise();
};

getIntent = function (blueprint) {
	const params = {
   name: blueprint.name,
   version: "$LATEST"
  };
  return lex.getIntent(params).promise();
};

putIntent = function (blueprint) {
	const params = blueprint;
	// Add checksum params if the bot is already exist.
  if (params.checksum) {
    params['checksum'] = params.checksum
  }
  return lex.putIntent(params).promise();
  // console.log(JSON.stringify(params, null, 2));
};

getBot = function (config) {
  const params = {
   name: config.name,
   versionOrAlias: "$LATEST"
  };
  return lex.getBot(params).promise();
};

putBot = function (bot) {
	const params = bot;
  return lex.putBot(params).promise();
};

getBotAlias = function (alias) {
	const params = {
		'name': alias.name,
		'botName': alias.botName
	};
  return lex.getBotAlias(params).promise();
};

putBotAlias = function (alias) {
	const params = alias;
  return lex.putBotAlias(params).promise();
};

getSlotType = function(config) {
	const params = {
		name: config.name,
		version: '$LATEST'
	};
	return lex.getSlotType(params).promise();
};

putSlotType = function(config) {

};

module.exports = {
	getBotAlias,
	putBotAlias,
	removePermission,
	addPermission,
  getBot,
  putBot,
	getIntent,
	putIntent
};
