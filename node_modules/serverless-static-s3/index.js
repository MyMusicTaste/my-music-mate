'use strict';

const AWS = require('aws-sdk');
const fs = require("fs");

AWS.config.update({region:'us-east-1'});
AWS.config.setPromisesDependency(require('bluebird'));
const s3Helper = require('./s3-helper');

class ServerlessS3Static {
  constructor(serverless, options) {
    this.serverless = serverless;
    this.options = options;

    this.commands = {
      static: {
        lifecycleEvents: [
          'deploy'
        ]
      }
    };
    
    this.hooks = {
      'static:deploy': this.deployStatic.bind(this),
	    // 'after:deploy:deploy': this.deployStatic.bind(this),
    };
    
    if (this.serverless.service.custom.static.deploy) {
    	this.hooks[this.serverless.service.custom.static.deploy] = this.deployStatic.bind(this);
    }
  }

  deployStatic() {
    this.serverless.cli.log('Deploying static files to S3 bucket...');
    const cloudformation = new AWS.CloudFormation();
    
		const params = {
			StackName: this.serverless.service.service + '-' + this.serverless.service.provider.stage, /* required */
		};
		cloudformation.listStackResources(params).promise().then((success) => {
			let s3BucketName = null;
			success.StackResourceSummaries.forEach((resource) => {
				if (resource.LogicalResourceId === 'ServerlessDeploymentBucket') {
					s3BucketName = resource.PhysicalResourceId
				}
				
			});
			if (s3BucketName) {
				const s3BucketAddress = 'https://s3.amazonaws.com/' + s3BucketName;
				const staticRootDirectory = process.cwd() + this.serverless.service.custom.static.root;
				const s3Pattern = '${s3}';
				const slackPattern = '${slack}';
				const slackAppId = this.serverless.service.provider.environment.SLACK_APP_ID;
				s3Helper.uploadFilesToS3Bucket(s3BucketName, staticRootDirectory, s3Pattern, s3BucketAddress, slackPattern, slackAppId);
			}
		}).catch((error) => {
			console.log(error)
		});
  }
}

module.exports = ServerlessS3Static;
