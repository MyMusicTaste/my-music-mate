/**
 * Created by jongwonkim on 18/07/2017.
 */

const fs = require('fs.extra');
const path = require('path');
// In newer Node.js versions where process is already global this isn't necessary.
// var process = require( "process" );

const AWS = require('aws-sdk');
const s3 = new AWS.S3();
const mime = require('mime');


// var moveFrom = "/home/mike/dev/node/sonar/moveme";
// var moveTo = "/home/mike/dev/node/sonar/tome"

// Create
const mkdirpath = function(dirPath)
{
    if(!fs.existsSync(dirPath))
    {
        try
        {
            fs.mkdirSync(dirPath);
        }
        catch(e)
        {
            mkdirpath(path.dirname(dirPath));
            mkdirpath(dirPath);
        }
    }
};

const copyFilesWithReplace = function(bucket, moveFrom, moveTo, original, replace) {
	iterateAndReplace(bucket, moveFrom, moveFrom, original, replace);
	//
	// fs.rmrfSync(moveTo);
	// mkdirpath(moveTo);
	//
	// fs.copyRecursive(moveFrom, moveTo, function (err) {
	//   if (err) {
	//     throw err;
	//   }
	//   console.log('Files are copied successfully.')
	// 	iterateAndReplace(bucket, moveTo, moveTo, original, replace);
	//   // s3Helper.uploadDirectory(moveTo, moveTo);
	// });
};

const iterateAndReplace = function(bucket, origin, dir, original, replace) {
	// Loop through all the files in the temp directory
	fs.readdir(dir, function(err, files) {
		if(err) {
		  console.error("Could not list the directory.", err);
		  process.exit(1);
		}

		files.forEach( function( file, index ) {
	    // Make one pass and make the file complete
	    const toPath = path.join(dir, file);

	    fs.stat(toPath, function( error, stat ) {
	      if(error) {
	        console.error( "Error stating file.", error );
	        return;
	      }
	      
	      if(stat.isFile()) {
	      	if (path.extname(file) === '.html') {
			      fs.readFile(toPath, 'utf8', function (err, data) {
				      if (err) {
					      return console.log(err);
				      }
				      data = data.replace(original, replace);
				
				      const filename = toPath.replace(origin, '');
				      params = {
					      Bucket: bucket,
					      Key: filename,
					      Body: data,
					      ACL: 'public-read',
					      ContentType: mime.lookup(toPath)
				      };
				      console.log(params['ContentType']);
				      s3.putObject(params, (res) => {
					      console.log(`Successfully uploaded '${filename}'`);
				      });
				
				
				      // is_html = true;
				      // console.log(toPath);
				      data = data.replace(original, replace);
				      // fs.writeFile(toPath, result, 'utf8', function (err) {
				      //    if (err) return console.log(err);
				      // });
			      });
		      } else {
			      fs.readFile(toPath, function (err, data) {
				      if (err) {
					      return console.log(err);
				      }
				      
				      const filename = toPath.replace(origin, '');
				      params = {
					      Bucket: bucket,
					      Key: filename,
					      Body: data,
					      ACL: 'public-read',
					      ContentType: mime.lookup(toPath)
				      };
				      console.log(params['ContentType']);
				      s3.putObject(params, (res) => {
					      console.log(`Successfully uploaded '${filename}'`);
				      });
			      });
		      }
	      } else if(stat.isDirectory()) {
	      	iterateAndReplace(bucket, origin, toPath, original, replace)
	      }
	    });
		});
	});
};

module.exports = {
  copyFilesWithReplace
};
