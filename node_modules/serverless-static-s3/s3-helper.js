/**
 * Created by jongwonkim on 18/07/2017.
 */

const fs = require('fs');
const path = require('path');

const AWS = require('aws-sdk');
const s3 = new AWS.S3();
const mime = require('mime');


const uploadFilesToS3Bucket = function(bucket, directory, original, replace, original2, replace2) {
	replaceAndUpload(bucket, directory, directory, original, replace, original2, replace2);
};

const replaceAndUpload = function(bucket, origin, dir, original, replace, original2, replace2) {
	fs.readdir(dir, function(err, files) {
		if(err) {
		  console.error("Could not list the directory.", err);
		  process.exit(1);
		}
		files.forEach( function( file, index ) {
	    const toPath = path.join(dir, file);

	    fs.stat(toPath, function( error, stat ) {
	      if(error) {
	        console.error("Error stating file.", error);
	        return;
	      }
	      
	      if(stat.isFile()) {
	      	if (path.extname(file) === '.html') { // HTML file.
			      fs.readFile(toPath, 'utf8', function (err, data) {
				      if (err) {
					      return console.log(err);
				      }
				      // Replace the pattern into a s3 address.
				      data = data.replace(original, replace);
				      // Replace the pattern into a slack app id.
				      data = data.replace(original2, replace2);
				
				      const filename = toPath.replace(origin, '');
				      const params = {
					      Bucket: bucket,
					      Key: filename,
					      Body: data,
					      ACL: 'public-read',
					      ContentType: mime.lookup(toPath)
				      };
				      s3.putObject(params, (success) => {
				      	if (filename === 'install.html') {
				      		console.log(`Slack App Install Page Link - ${replace}/${filename}`);
					      }
				      }, (error) => {
				      	console.error(error);
				      });
			      });
		      } else {  // Image file.
			      fs.readFile(toPath, function (err, data) {
				      if (err) {
					      return console.log(err);
				      }
				      const filename = toPath.replace(origin, '');
				      const params = {
					      Bucket: bucket,
					      Key: filename,
					      Body: data,
					      ACL: 'public-read',
					      ContentType: mime.lookup(toPath)
				      };
				      s3.putObject(params, (success) => {}, (error) => {
				      	console.error(error);
				      });
			      });
		      }
	      } else if(stat.isDirectory()) {
	      	console.log(`Uploading '/${toPath.replace(origin, '')}' directory...`);
	      	replaceAndUpload(bucket, origin, toPath, original, replace, original2, replace2)
	      }
	    });
		});
	});
};

module.exports = {
  uploadFilesToS3Bucket
};
